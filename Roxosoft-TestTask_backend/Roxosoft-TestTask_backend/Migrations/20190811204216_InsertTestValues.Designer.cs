// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApp._Internal.Repositories;

namespace WebApp.Migrations
{
    [DbContext(typeof(OrdersRepository))]
    [Migration("20190811204216_InsertTestValues")]
    partial class InsertTestValues
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("WebApp._Internal.Entities.OrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnName("created");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTimeOffset(new DateTime(2019, 7, 10, 13, 14, 14, 100, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTimeOffset(new DateTime(2019, 9, 19, 19, 19, 19, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 0, 0, 0)),
                            Status = 0
                        });
                });

            modelBuilder.Entity("WebApp._Internal.Entities.OrderProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("OrderEntityId");

                    b.Property<int?>("OrderId");

                    b.Property<int?>("ProductEntityId");

                    b.Property<int?>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("OrderEntityId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductEntityId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_vs_product");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66397d65-2191-43bd-8f13-283e4c10ffae"),
                            OrderId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            Id = new Guid("86b7ace5-eb64-4b56-89a9-4e3195d32a65"),
                            OrderId = 1,
                            ProductId = 2
                        },
                        new
                        {
                            Id = new Guid("7ca86171-3837-4a2d-a0a2-9856cd456495"),
                            OrderId = 2,
                            ProductId = 3
                        });
                });

            modelBuilder.Entity("WebApp._Internal.Entities.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "TestProduct1",
                            Price = 12.199999999999999,
                            Quantity = 10
                        },
                        new
                        {
                            Id = 2,
                            Name = "TestProduct2",
                            Price = 122.0,
                            Quantity = 10
                        },
                        new
                        {
                            Id = 3,
                            Name = "TestProduct3",
                            Price = 10.0,
                            Quantity = 1000
                        });
                });

            modelBuilder.Entity("WebApp._Internal.Entities.OrderProductEntity", b =>
                {
                    b.HasOne("WebApp._Internal.Entities.OrderEntity")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderEntityId");

                    b.HasOne("WebApp._Internal.Entities.OrderEntity", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("WebApp._Internal.Entities.ProductEntity")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductEntityId");

                    b.HasOne("WebApp._Internal.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });
#pragma warning restore 612, 618
        }
    }
}
